// src/main.rs

mod cli;
mod config;

use clap::Parser;
use eyre::Result;
use glob::Pattern;
use std::{env, path::Path, process};
use walkdir::WalkDir;

use cli::Cli;
use config::{GithubRepo, ManifestSpec};

fn main() -> Result<()> {
    let cli = Cli::parse();

    env::set_current_dir(&cli.cwd)
        .unwrap_or_else(|e| { eprintln!("failed to cd {}: {}", cli.cwd, e); process::exit(1) });

    let spec = ManifestSpec::load(&cli.config)
        .unwrap_or_else(|e| { eprintln!("Error loading config: {}", e); process::exit(1) });

    println!("#!/bin/bash");
    if spec.verbose.unwrap_or(false) {
        println!("export VERBOSE=true");
    }
    println!("# generated by manifest.rs\n");

    let matches = |patterns: &Option<Vec<String>>, item: &str| {
        patterns.as_ref()
            .map(|globs| globs.iter().any(|g| Pattern::new(g).unwrap().matches(item)))
            .unwrap_or(true)
    };

    // LINKS
    if let Some(link) = &spec.link {
        println!("echo \"links:\"");
        for (src_raw, dst_raw) in &link.paths {
            let src = src_raw.replace("$HOME", &cli.home);
            let dst = dst_raw.replace("$HOME", &cli.home);

            if link.recursive {
                for entry in WalkDir::new(&src).into_iter().filter_map(Result::ok).filter(|e| e.file_type().is_file()) {
                    let rel = entry.path().strip_prefix(&src).unwrap();
                    let dst_path = Path::new(&dst).join(rel);
                    println!("mkdir -p {}", dst_path.parent().unwrap().display());
                    println!("ln -sf {} {}", entry.path().display(), dst_path.display());
                }
            } else {
                println!("mkdir -p {}", Path::new(&dst).parent().unwrap().display());
                println!("ln -sf {} {}", src, dst);
            }
        }
        println!();
    }

    // PACKAGE INSTALLS
    let use_deb = cli.pkgmgr.as_deref().unwrap_or("deb") == "deb";
    for (name, section, cli_flag) in &[
        ("ppa", &spec.ppa, &cli.ppa),
        ("apt", &spec.apt, &cli.apt),
        ("dnf", &spec.dnf, &cli.dnf),
        ("npm", &spec.npm, &cli.npm),
        ("pip3", &spec.pip3, &cli.pip3),
        ("pipx", &spec.pipx, &cli.pipx),
        ("flatpak", &spec.flatpak, &cli.flatpak),
        ("cargo", &spec.cargo, &cli.cargo),
    ] {
        if let Some(sec) = section {
            println!("echo \"{}:\"", name);
            for pkg in &sec.items {
                if matches(cli_flag, pkg) {
                    match *name {
                        "ppa" if use_deb => println!("sudo add-apt-repository -y {}", pkg),
                        "apt" if use_deb => println!("sudo apt update && sudo apt install -y {}", pkg),
                        "dnf" if !use_deb => println!("sudo dnf install -y {}", pkg),
                        "npm" => println!("sudo npm install -g {}", pkg),
                        "pip3" => println!("sudo -H pip3 install --upgrade {}", pkg),
                        "pipx" => println!("pipx install {}", pkg),
                        "flatpak" => println!("flatpak install --assumeyes {}", pkg),
                        "cargo" => println!("cargo install {}", pkg),
                        _ => {}
                    }
                }
            }
            println!();
        }
    }

    // GITHUB REPOS
    if let Some(repos) = &spec.github {
        println!("echo \"github repos:\"");
        for (repo, GithubRepo { link }) in repos {
            if matches(&cli.github, repo) {
                println!("git clone --recursive https://github.com/{} ~/repos/{}", repo, repo);
                if let Some(mapping) = link {
                    for (src, dst) in mapping {
                        println!("mkdir -p {}", Path::new(dst).parent().unwrap().display());
                        println!("ln -sf ~/repos/{}/{} {}", repo, src, dst.replace("$HOME", &cli.home));
                    }
                }
            }
        }
        println!();
    }

    // SCRIPTS
    if let Some(scripts) = &spec.script {
        println!("echo \"scripts:\"");
        for (name, body) in scripts {
            if matches(&cli.script, name) {
                println!("echo \"{}:\" && {}", name, body.trim());
            }
        }
        println!();
    }

    Ok(())
}
